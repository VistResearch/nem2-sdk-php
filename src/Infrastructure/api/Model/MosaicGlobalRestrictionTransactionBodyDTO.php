<?php
/**
 * MosaicGlobalRestrictionTransactionBodyDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catapult REST Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.19
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MosaicGlobalRestrictionTransactionBodyDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MosaicGlobalRestrictionTransactionBodyDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MosaicGlobalRestrictionTransactionBodyDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mosaic_id' => 'string',
        'reference_mosaic_id' => 'string',
        'restriction_key' => 'string',
        'previous_restriction_value' => 'string',
        'previous_restriction_type' => '\OpenAPI\Client\Model\MosaicRestrictionTypeEnum',
        'new_restriction_value' => 'string',
        'new_restriction_type' => '\OpenAPI\Client\Model\MosaicRestrictionTypeEnum'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'mosaic_id' => 'hexa',
        'reference_mosaic_id' => 'hexa',
        'restriction_key' => 'hex',
        'previous_restriction_value' => null,
        'previous_restriction_type' => null,
        'new_restriction_value' => null,
        'new_restriction_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mosaic_id' => 'mosaicId',
        'reference_mosaic_id' => 'referenceMosaicId',
        'restriction_key' => 'restrictionKey',
        'previous_restriction_value' => 'previousRestrictionValue',
        'previous_restriction_type' => 'previousRestrictionType',
        'new_restriction_value' => 'newRestrictionValue',
        'new_restriction_type' => 'newRestrictionType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mosaic_id' => 'setMosaicId',
        'reference_mosaic_id' => 'setReferenceMosaicId',
        'restriction_key' => 'setRestrictionKey',
        'previous_restriction_value' => 'setPreviousRestrictionValue',
        'previous_restriction_type' => 'setPreviousRestrictionType',
        'new_restriction_value' => 'setNewRestrictionValue',
        'new_restriction_type' => 'setNewRestrictionType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mosaic_id' => 'getMosaicId',
        'reference_mosaic_id' => 'getReferenceMosaicId',
        'restriction_key' => 'getRestrictionKey',
        'previous_restriction_value' => 'getPreviousRestrictionValue',
        'previous_restriction_type' => 'getPreviousRestrictionType',
        'new_restriction_value' => 'getNewRestrictionValue',
        'new_restriction_type' => 'getNewRestrictionType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mosaic_id'] = isset($data['mosaic_id']) ? $data['mosaic_id'] : null;
        $this->container['reference_mosaic_id'] = isset($data['reference_mosaic_id']) ? $data['reference_mosaic_id'] : null;
        $this->container['restriction_key'] = isset($data['restriction_key']) ? $data['restriction_key'] : null;
        $this->container['previous_restriction_value'] = isset($data['previous_restriction_value']) ? $data['previous_restriction_value'] : null;
        $this->container['previous_restriction_type'] = isset($data['previous_restriction_type']) ? $data['previous_restriction_type'] : null;
        $this->container['new_restriction_value'] = isset($data['new_restriction_value']) ? $data['new_restriction_value'] : null;
        $this->container['new_restriction_type'] = isset($data['new_restriction_type']) ? $data['new_restriction_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['mosaic_id'] === null) {
            $invalidProperties[] = "'mosaic_id' can't be null";
        }
        if ($this->container['reference_mosaic_id'] === null) {
            $invalidProperties[] = "'reference_mosaic_id' can't be null";
        }
        if ($this->container['restriction_key'] === null) {
            $invalidProperties[] = "'restriction_key' can't be null";
        }
        if ($this->container['previous_restriction_value'] === null) {
            $invalidProperties[] = "'previous_restriction_value' can't be null";
        }
        if ($this->container['previous_restriction_type'] === null) {
            $invalidProperties[] = "'previous_restriction_type' can't be null";
        }
        if ($this->container['new_restriction_value'] === null) {
            $invalidProperties[] = "'new_restriction_value' can't be null";
        }
        if ($this->container['new_restriction_type'] === null) {
            $invalidProperties[] = "'new_restriction_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mosaic_id
     *
     * @return string
     */
    public function getMosaicId()
    {
        return $this->container['mosaic_id'];
    }

    /**
     * Sets mosaic_id
     *
     * @param string $mosaic_id Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of the real  mosaic identifier.
     *
     * @return $this
     */
    public function setMosaicId($mosaic_id)
    {
        $this->container['mosaic_id'] = $mosaic_id;

        return $this;
    }

    /**
     * Gets reference_mosaic_id
     *
     * @return string
     */
    public function getReferenceMosaicId()
    {
        return $this->container['reference_mosaic_id'];
    }

    /**
     * Sets reference_mosaic_id
     *
     * @param string $reference_mosaic_id Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of the real  mosaic identifier.
     *
     * @return $this
     */
    public function setReferenceMosaicId($reference_mosaic_id)
    {
        $this->container['reference_mosaic_id'] = $reference_mosaic_id;

        return $this;
    }

    /**
     * Gets restriction_key
     *
     * @return string
     */
    public function getRestrictionKey()
    {
        return $this->container['restriction_key'];
    }

    /**
     * Sets restriction_key
     *
     * @param string $restriction_key Restriction key.
     *
     * @return $this
     */
    public function setRestrictionKey($restriction_key)
    {
        $this->container['restriction_key'] = $restriction_key;

        return $this;
    }

    /**
     * Gets previous_restriction_value
     *
     * @return string
     */
    public function getPreviousRestrictionValue()
    {
        return $this->container['previous_restriction_value'];
    }

    /**
     * Sets previous_restriction_value
     *
     * @param string $previous_restriction_value Previous restriction value.
     *
     * @return $this
     */
    public function setPreviousRestrictionValue($previous_restriction_value)
    {
        $this->container['previous_restriction_value'] = $previous_restriction_value;

        return $this;
    }

    /**
     * Gets previous_restriction_type
     *
     * @return \OpenAPI\Client\Model\MosaicRestrictionTypeEnum
     */
    public function getPreviousRestrictionType()
    {
        return $this->container['previous_restriction_type'];
    }

    /**
     * Sets previous_restriction_type
     *
     * @param \OpenAPI\Client\Model\MosaicRestrictionTypeEnum $previous_restriction_type previous_restriction_type
     *
     * @return $this
     */
    public function setPreviousRestrictionType($previous_restriction_type)
    {
        $this->container['previous_restriction_type'] = $previous_restriction_type;

        return $this;
    }

    /**
     * Gets new_restriction_value
     *
     * @return string
     */
    public function getNewRestrictionValue()
    {
        return $this->container['new_restriction_value'];
    }

    /**
     * Sets new_restriction_value
     *
     * @param string $new_restriction_value New restriction value.
     *
     * @return $this
     */
    public function setNewRestrictionValue($new_restriction_value)
    {
        $this->container['new_restriction_value'] = $new_restriction_value;

        return $this;
    }

    /**
     * Gets new_restriction_type
     *
     * @return \OpenAPI\Client\Model\MosaicRestrictionTypeEnum
     */
    public function getNewRestrictionType()
    {
        return $this->container['new_restriction_type'];
    }

    /**
     * Sets new_restriction_type
     *
     * @param \OpenAPI\Client\Model\MosaicRestrictionTypeEnum $new_restriction_type new_restriction_type
     *
     * @return $this
     */
    public function setNewRestrictionType($new_restriction_type)
    {
        $this->container['new_restriction_type'] = $new_restriction_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


