<?php
/**
 * NamespaceDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catapult REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NamespaceDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NamespaceDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NamespaceDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'owner' => 'string',
        'owner_address' => 'string',
        'start_height' => '\Swagger\Client\Model\UInt64DTO',
        'end_height' => '\Swagger\Client\Model\UInt64DTO',
        'depth' => 'int',
        'level0' => '\Swagger\Client\Model\UInt64DTO',
        'level1' => '\Swagger\Client\Model\UInt64DTO',
        'level2' => '\Swagger\Client\Model\UInt64DTO',
        'type' => 'int',
        'alias' => '\Swagger\Client\Model\AliasDTO',
        'parent_id' => '\Swagger\Client\Model\UInt64DTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'owner' => null,
        'owner_address' => null,
        'start_height' => null,
        'end_height' => null,
        'depth' => null,
        'level0' => null,
        'level1' => null,
        'level2' => null,
        'type' => null,
        'alias' => null,
        'parent_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'owner' => 'owner',
        'owner_address' => 'ownerAddress',
        'start_height' => 'startHeight',
        'end_height' => 'endHeight',
        'depth' => 'depth',
        'level0' => 'level0',
        'level1' => 'level1',
        'level2' => 'level2',
        'type' => 'type',
        'alias' => 'alias',
        'parent_id' => 'parentId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'owner' => 'setOwner',
        'owner_address' => 'setOwnerAddress',
        'start_height' => 'setStartHeight',
        'end_height' => 'setEndHeight',
        'depth' => 'setDepth',
        'level0' => 'setLevel0',
        'level1' => 'setLevel1',
        'level2' => 'setLevel2',
        'type' => 'setType',
        'alias' => 'setAlias',
        'parent_id' => 'setParentId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'owner' => 'getOwner',
        'owner_address' => 'getOwnerAddress',
        'start_height' => 'getStartHeight',
        'end_height' => 'getEndHeight',
        'depth' => 'getDepth',
        'level0' => 'getLevel0',
        'level1' => 'getLevel1',
        'level2' => 'getLevel2',
        'type' => 'getType',
        'alias' => 'getAlias',
        'parent_id' => 'getParentId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['owner_address'] = isset($data['owner_address']) ? $data['owner_address'] : null;
        $this->container['start_height'] = isset($data['start_height']) ? $data['start_height'] : null;
        $this->container['end_height'] = isset($data['end_height']) ? $data['end_height'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['level0'] = isset($data['level0']) ? $data['level0'] : null;
        $this->container['level1'] = isset($data['level1']) ? $data['level1'] : null;
        $this->container['level2'] = isset($data['level2']) ? $data['level2'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        if ($this->container['start_height'] === null) {
            $invalidProperties[] = "'start_height' can't be null";
        }
        if ($this->container['end_height'] === null) {
            $invalidProperties[] = "'end_height' can't be null";
        }
        if ($this->container['depth'] === null) {
            $invalidProperties[] = "'depth' can't be null";
        }
        if ($this->container['level0'] === null) {
            $invalidProperties[] = "'level0' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['alias'] === null) {
            $invalidProperties[] = "'alias' can't be null";
        }
        if ($this->container['parent_id'] === null) {
            $invalidProperties[] = "'parent_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets owner_address
     *
     * @return string
     */
    public function getOwnerAddress()
    {
        return $this->container['owner_address'];
    }

    /**
     * Sets owner_address
     *
     * @param string $owner_address owner_address
     *
     * @return $this
     */
    public function setOwnerAddress($owner_address)
    {
        $this->container['owner_address'] = $owner_address;

        return $this;
    }

    /**
     * Gets start_height
     *
     * @return \Swagger\Client\Model\UInt64DTO
     */
    public function getStartHeight()
    {
        return $this->container['start_height'];
    }

    /**
     * Sets start_height
     *
     * @param \Swagger\Client\Model\UInt64DTO $start_height start_height
     *
     * @return $this
     */
    public function setStartHeight($start_height)
    {
        $this->container['start_height'] = $start_height;

        return $this;
    }

    /**
     * Gets end_height
     *
     * @return \Swagger\Client\Model\UInt64DTO
     */
    public function getEndHeight()
    {
        return $this->container['end_height'];
    }

    /**
     * Sets end_height
     *
     * @param \Swagger\Client\Model\UInt64DTO $end_height end_height
     *
     * @return $this
     */
    public function setEndHeight($end_height)
    {
        $this->container['end_height'] = $end_height;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return int
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param int $depth depth
     *
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets level0
     *
     * @return \Swagger\Client\Model\UInt64DTO
     */
    public function getLevel0()
    {
        return $this->container['level0'];
    }

    /**
     * Sets level0
     *
     * @param \Swagger\Client\Model\UInt64DTO $level0 level0
     *
     * @return $this
     */
    public function setLevel0($level0)
    {
        $this->container['level0'] = $level0;

        return $this;
    }

    /**
     * Gets level1
     *
     * @return \Swagger\Client\Model\UInt64DTO
     */
    public function getLevel1()
    {
        return $this->container['level1'];
    }

    /**
     * Sets level1
     *
     * @param \Swagger\Client\Model\UInt64DTO $level1 level1
     *
     * @return $this
     */
    public function setLevel1($level1)
    {
        $this->container['level1'] = $level1;

        return $this;
    }

    /**
     * Gets level2
     *
     * @return \Swagger\Client\Model\UInt64DTO
     */
    public function getLevel2()
    {
        return $this->container['level2'];
    }

    /**
     * Sets level2
     *
     * @param \Swagger\Client\Model\UInt64DTO $level2 level2
     *
     * @return $this
     */
    public function setLevel2($level2)
    {
        $this->container['level2'] = $level2;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return \Swagger\Client\Model\AliasDTO
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param \Swagger\Client\Model\AliasDTO $alias alias
     *
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return \Swagger\Client\Model\UInt64DTO
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param \Swagger\Client\Model\UInt64DTO $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


