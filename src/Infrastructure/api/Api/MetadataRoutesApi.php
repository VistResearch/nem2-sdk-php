<?php
/**
 * MetadataRoutesApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catapult REST Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.19
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * MetadataRoutesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MetadataRoutesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAccountMetadata
     *
     * Get account metadata
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MetadataEntriesDTO
     */
    public function getAccountMetadata($account_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        list($response) = $this->getAccountMetadataWithHttpInfo($account_id, $page_size, $id, $ordering);
        return $response;
    }

    /**
     * Operation getAccountMetadataWithHttpInfo
     *
     * Get account metadata
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MetadataEntriesDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountMetadataWithHttpInfo($account_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        $request = $this->getAccountMetadataRequest($account_id, $page_size, $id, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MetadataEntriesDTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MetadataEntriesDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MetadataEntriesDTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MetadataEntriesDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountMetadataAsync
     *
     * Get account metadata
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountMetadataAsync($account_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        return $this->getAccountMetadataAsyncWithHttpInfo($account_id, $page_size, $id, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountMetadataAsyncWithHttpInfo
     *
     * Get account metadata
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountMetadataAsyncWithHttpInfo($account_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        $returnType = '\OpenAPI\Client\Model\MetadataEntriesDTO';
        $request = $this->getAccountMetadataRequest($account_id, $page_size, $id, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountMetadata'
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountMetadataRequest($account_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getAccountMetadata'
            );
        }
        if ($page_size !== null && $page_size > 100) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling MetadataRoutesApi.getAccountMetadata, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 10) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling MetadataRoutesApi.getAccountMetadata, must be bigger than or equal to 10.');
        }


        $resourcePath = '/metadata/account/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountMetadataByKey
     *
     * Get account metadata
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MetadataEntriesDTO
     */
    public function getAccountMetadataByKey($account_id, $key)
    {
        list($response) = $this->getAccountMetadataByKeyWithHttpInfo($account_id, $key);
        return $response;
    }

    /**
     * Operation getAccountMetadataByKeyWithHttpInfo
     *
     * Get account metadata
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MetadataEntriesDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountMetadataByKeyWithHttpInfo($account_id, $key)
    {
        $request = $this->getAccountMetadataByKeyRequest($account_id, $key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MetadataEntriesDTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MetadataEntriesDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MetadataEntriesDTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MetadataEntriesDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountMetadataByKeyAsync
     *
     * Get account metadata
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountMetadataByKeyAsync($account_id, $key)
    {
        return $this->getAccountMetadataByKeyAsyncWithHttpInfo($account_id, $key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountMetadataByKeyAsyncWithHttpInfo
     *
     * Get account metadata
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountMetadataByKeyAsyncWithHttpInfo($account_id, $key)
    {
        $returnType = '\OpenAPI\Client\Model\MetadataEntriesDTO';
        $request = $this->getAccountMetadataByKeyRequest($account_id, $key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountMetadataByKey'
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountMetadataByKeyRequest($account_id, $key)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getAccountMetadataByKey'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getAccountMetadataByKey'
            );
        }

        $resourcePath = '/metadata/account/{accountId}/key/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountMetadataByKeyAndSender
     *
     * Get account metadata
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MetadataDTO
     */
    public function getAccountMetadataByKeyAndSender($account_id, $key, $public_key)
    {
        list($response) = $this->getAccountMetadataByKeyAndSenderWithHttpInfo($account_id, $key, $public_key);
        return $response;
    }

    /**
     * Operation getAccountMetadataByKeyAndSenderWithHttpInfo
     *
     * Get account metadata
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MetadataDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountMetadataByKeyAndSenderWithHttpInfo($account_id, $key, $public_key)
    {
        $request = $this->getAccountMetadataByKeyAndSenderRequest($account_id, $key, $public_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MetadataDTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MetadataDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MetadataDTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MetadataDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountMetadataByKeyAndSenderAsync
     *
     * Get account metadata
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountMetadataByKeyAndSenderAsync($account_id, $key, $public_key)
    {
        return $this->getAccountMetadataByKeyAndSenderAsyncWithHttpInfo($account_id, $key, $public_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountMetadataByKeyAndSenderAsyncWithHttpInfo
     *
     * Get account metadata
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountMetadataByKeyAndSenderAsyncWithHttpInfo($account_id, $key, $public_key)
    {
        $returnType = '\OpenAPI\Client\Model\MetadataDTO';
        $request = $this->getAccountMetadataByKeyAndSenderRequest($account_id, $key, $public_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountMetadataByKeyAndSender'
     *
     * @param  string $account_id Account public key or address. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountMetadataByKeyAndSenderRequest($account_id, $key, $public_key)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getAccountMetadataByKeyAndSender'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getAccountMetadataByKeyAndSender'
            );
        }
        // verify the required parameter 'public_key' is set
        if ($public_key === null || (is_array($public_key) && count($public_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_key when calling getAccountMetadataByKeyAndSender'
            );
        }

        $resourcePath = '/metadata/account/{accountId}/key/{key}/sender/{publicKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($public_key !== null) {
            $resourcePath = str_replace(
                '{' . 'publicKey' . '}',
                ObjectSerializer::toPathValue($public_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMosaicMetadata
     *
     * Get mosaic metadata
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MetadataEntriesDTO
     */
    public function getMosaicMetadata($mosaic_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        list($response) = $this->getMosaicMetadataWithHttpInfo($mosaic_id, $page_size, $id, $ordering);
        return $response;
    }

    /**
     * Operation getMosaicMetadataWithHttpInfo
     *
     * Get mosaic metadata
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MetadataEntriesDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMosaicMetadataWithHttpInfo($mosaic_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        $request = $this->getMosaicMetadataRequest($mosaic_id, $page_size, $id, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MetadataEntriesDTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MetadataEntriesDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MetadataEntriesDTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MetadataEntriesDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMosaicMetadataAsync
     *
     * Get mosaic metadata
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMosaicMetadataAsync($mosaic_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        return $this->getMosaicMetadataAsyncWithHttpInfo($mosaic_id, $page_size, $id, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMosaicMetadataAsyncWithHttpInfo
     *
     * Get mosaic metadata
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMosaicMetadataAsyncWithHttpInfo($mosaic_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        $returnType = '\OpenAPI\Client\Model\MetadataEntriesDTO';
        $request = $this->getMosaicMetadataRequest($mosaic_id, $page_size, $id, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMosaicMetadata'
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMosaicMetadataRequest($mosaic_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        // verify the required parameter 'mosaic_id' is set
        if ($mosaic_id === null || (is_array($mosaic_id) && count($mosaic_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mosaic_id when calling getMosaicMetadata'
            );
        }
        if ($page_size !== null && $page_size > 100) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling MetadataRoutesApi.getMosaicMetadata, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 10) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling MetadataRoutesApi.getMosaicMetadata, must be bigger than or equal to 10.');
        }


        $resourcePath = '/metadata/mosaic/{mosaicId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }

        // path params
        if ($mosaic_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mosaicId' . '}',
                ObjectSerializer::toPathValue($mosaic_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMosaicMetadataByKey
     *
     * Get mosaic metadata
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MetadataEntriesDTO
     */
    public function getMosaicMetadataByKey($mosaic_id, $key)
    {
        list($response) = $this->getMosaicMetadataByKeyWithHttpInfo($mosaic_id, $key);
        return $response;
    }

    /**
     * Operation getMosaicMetadataByKeyWithHttpInfo
     *
     * Get mosaic metadata
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MetadataEntriesDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMosaicMetadataByKeyWithHttpInfo($mosaic_id, $key)
    {
        $request = $this->getMosaicMetadataByKeyRequest($mosaic_id, $key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MetadataEntriesDTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MetadataEntriesDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MetadataEntriesDTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MetadataEntriesDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMosaicMetadataByKeyAsync
     *
     * Get mosaic metadata
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMosaicMetadataByKeyAsync($mosaic_id, $key)
    {
        return $this->getMosaicMetadataByKeyAsyncWithHttpInfo($mosaic_id, $key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMosaicMetadataByKeyAsyncWithHttpInfo
     *
     * Get mosaic metadata
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMosaicMetadataByKeyAsyncWithHttpInfo($mosaic_id, $key)
    {
        $returnType = '\OpenAPI\Client\Model\MetadataEntriesDTO';
        $request = $this->getMosaicMetadataByKeyRequest($mosaic_id, $key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMosaicMetadataByKey'
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMosaicMetadataByKeyRequest($mosaic_id, $key)
    {
        // verify the required parameter 'mosaic_id' is set
        if ($mosaic_id === null || (is_array($mosaic_id) && count($mosaic_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mosaic_id when calling getMosaicMetadataByKey'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getMosaicMetadataByKey'
            );
        }

        $resourcePath = '/metadata/mosaic/{mosaicId}/key/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($mosaic_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mosaicId' . '}',
                ObjectSerializer::toPathValue($mosaic_id),
                $resourcePath
            );
        }
        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMosaicMetadataByKeyAndSender
     *
     * Get mosaic metadata
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MetadataDTO
     */
    public function getMosaicMetadataByKeyAndSender($mosaic_id, $key, $public_key)
    {
        list($response) = $this->getMosaicMetadataByKeyAndSenderWithHttpInfo($mosaic_id, $key, $public_key);
        return $response;
    }

    /**
     * Operation getMosaicMetadataByKeyAndSenderWithHttpInfo
     *
     * Get mosaic metadata
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MetadataDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMosaicMetadataByKeyAndSenderWithHttpInfo($mosaic_id, $key, $public_key)
    {
        $request = $this->getMosaicMetadataByKeyAndSenderRequest($mosaic_id, $key, $public_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MetadataDTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MetadataDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MetadataDTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MetadataDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMosaicMetadataByKeyAndSenderAsync
     *
     * Get mosaic metadata
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMosaicMetadataByKeyAndSenderAsync($mosaic_id, $key, $public_key)
    {
        return $this->getMosaicMetadataByKeyAndSenderAsyncWithHttpInfo($mosaic_id, $key, $public_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMosaicMetadataByKeyAndSenderAsyncWithHttpInfo
     *
     * Get mosaic metadata
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMosaicMetadataByKeyAndSenderAsyncWithHttpInfo($mosaic_id, $key, $public_key)
    {
        $returnType = '\OpenAPI\Client\Model\MetadataDTO';
        $request = $this->getMosaicMetadataByKeyAndSenderRequest($mosaic_id, $key, $public_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMosaicMetadataByKeyAndSender'
     *
     * @param  string $mosaic_id Mosaic identifier. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMosaicMetadataByKeyAndSenderRequest($mosaic_id, $key, $public_key)
    {
        // verify the required parameter 'mosaic_id' is set
        if ($mosaic_id === null || (is_array($mosaic_id) && count($mosaic_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mosaic_id when calling getMosaicMetadataByKeyAndSender'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getMosaicMetadataByKeyAndSender'
            );
        }
        // verify the required parameter 'public_key' is set
        if ($public_key === null || (is_array($public_key) && count($public_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_key when calling getMosaicMetadataByKeyAndSender'
            );
        }

        $resourcePath = '/metadata/mosaic/{mosaicId}/key/{key}/sender/{publicKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($mosaic_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mosaicId' . '}',
                ObjectSerializer::toPathValue($mosaic_id),
                $resourcePath
            );
        }
        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($public_key !== null) {
            $resourcePath = str_replace(
                '{' . 'publicKey' . '}',
                ObjectSerializer::toPathValue($public_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNamespaceMetadata
     *
     * Get namespace metadata
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MetadataEntriesDTO
     */
    public function getNamespaceMetadata($namespace_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        list($response) = $this->getNamespaceMetadataWithHttpInfo($namespace_id, $page_size, $id, $ordering);
        return $response;
    }

    /**
     * Operation getNamespaceMetadataWithHttpInfo
     *
     * Get namespace metadata
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MetadataEntriesDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNamespaceMetadataWithHttpInfo($namespace_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        $request = $this->getNamespaceMetadataRequest($namespace_id, $page_size, $id, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MetadataEntriesDTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MetadataEntriesDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MetadataEntriesDTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MetadataEntriesDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNamespaceMetadataAsync
     *
     * Get namespace metadata
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNamespaceMetadataAsync($namespace_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        return $this->getNamespaceMetadataAsyncWithHttpInfo($namespace_id, $page_size, $id, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNamespaceMetadataAsyncWithHttpInfo
     *
     * Get namespace metadata
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNamespaceMetadataAsyncWithHttpInfo($namespace_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        $returnType = '\OpenAPI\Client\Model\MetadataEntriesDTO';
        $request = $this->getNamespaceMetadataRequest($namespace_id, $page_size, $id, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNamespaceMetadata'
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  int $page_size Number of transactions to return for each request. (optional, default to 10)
     * @param  string $id Metadata identifier up to which metadata are returned. (optional)
     * @param  string $ordering Ordering criteria: * -id - Descending order by id. * id - Ascending order by id. (optional, default to '-id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNamespaceMetadataRequest($namespace_id, $page_size = 10, $id = null, $ordering = '-id')
    {
        // verify the required parameter 'namespace_id' is set
        if ($namespace_id === null || (is_array($namespace_id) && count($namespace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace_id when calling getNamespaceMetadata'
            );
        }
        if ($page_size !== null && $page_size > 100) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling MetadataRoutesApi.getNamespaceMetadata, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 10) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling MetadataRoutesApi.getNamespaceMetadata, must be bigger than or equal to 10.');
        }


        $resourcePath = '/metadata/namespace/{namespaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }

        // path params
        if ($namespace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'namespaceId' . '}',
                ObjectSerializer::toPathValue($namespace_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNamespaceMetadataByKey
     *
     * Get namespace metadata
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MetadataEntriesDTO
     */
    public function getNamespaceMetadataByKey($namespace_id, $key)
    {
        list($response) = $this->getNamespaceMetadataByKeyWithHttpInfo($namespace_id, $key);
        return $response;
    }

    /**
     * Operation getNamespaceMetadataByKeyWithHttpInfo
     *
     * Get namespace metadata
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MetadataEntriesDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNamespaceMetadataByKeyWithHttpInfo($namespace_id, $key)
    {
        $request = $this->getNamespaceMetadataByKeyRequest($namespace_id, $key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MetadataEntriesDTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MetadataEntriesDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MetadataEntriesDTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MetadataEntriesDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNamespaceMetadataByKeyAsync
     *
     * Get namespace metadata
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNamespaceMetadataByKeyAsync($namespace_id, $key)
    {
        return $this->getNamespaceMetadataByKeyAsyncWithHttpInfo($namespace_id, $key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNamespaceMetadataByKeyAsyncWithHttpInfo
     *
     * Get namespace metadata
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNamespaceMetadataByKeyAsyncWithHttpInfo($namespace_id, $key)
    {
        $returnType = '\OpenAPI\Client\Model\MetadataEntriesDTO';
        $request = $this->getNamespaceMetadataByKeyRequest($namespace_id, $key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNamespaceMetadataByKey'
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  string $key Metadata key. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNamespaceMetadataByKeyRequest($namespace_id, $key)
    {
        // verify the required parameter 'namespace_id' is set
        if ($namespace_id === null || (is_array($namespace_id) && count($namespace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace_id when calling getNamespaceMetadataByKey'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getNamespaceMetadataByKey'
            );
        }

        $resourcePath = '/metadata/namespace/{namespaceId}/key/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($namespace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'namespaceId' . '}',
                ObjectSerializer::toPathValue($namespace_id),
                $resourcePath
            );
        }
        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNamespaceMetadataByKeyAndSender
     *
     * Get namespace metadata
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MetadataDTO
     */
    public function getNamespaceMetadataByKeyAndSender($namespace_id, $key, $public_key)
    {
        list($response) = $this->getNamespaceMetadataByKeyAndSenderWithHttpInfo($namespace_id, $key, $public_key);
        return $response;
    }

    /**
     * Operation getNamespaceMetadataByKeyAndSenderWithHttpInfo
     *
     * Get namespace metadata
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MetadataDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNamespaceMetadataByKeyAndSenderWithHttpInfo($namespace_id, $key, $public_key)
    {
        $request = $this->getNamespaceMetadataByKeyAndSenderRequest($namespace_id, $key, $public_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MetadataDTO' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MetadataDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MetadataDTO';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MetadataDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNamespaceMetadataByKeyAndSenderAsync
     *
     * Get namespace metadata
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNamespaceMetadataByKeyAndSenderAsync($namespace_id, $key, $public_key)
    {
        return $this->getNamespaceMetadataByKeyAndSenderAsyncWithHttpInfo($namespace_id, $key, $public_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNamespaceMetadataByKeyAndSenderAsyncWithHttpInfo
     *
     * Get namespace metadata
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNamespaceMetadataByKeyAndSenderAsyncWithHttpInfo($namespace_id, $key, $public_key)
    {
        $returnType = '\OpenAPI\Client\Model\MetadataDTO';
        $request = $this->getNamespaceMetadataByKeyAndSenderRequest($namespace_id, $key, $public_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNamespaceMetadataByKeyAndSender'
     *
     * @param  string $namespace_id Namespace identifier. (required)
     * @param  string $key Metadata key. (required)
     * @param  string $public_key Account public key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNamespaceMetadataByKeyAndSenderRequest($namespace_id, $key, $public_key)
    {
        // verify the required parameter 'namespace_id' is set
        if ($namespace_id === null || (is_array($namespace_id) && count($namespace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace_id when calling getNamespaceMetadataByKeyAndSender'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getNamespaceMetadataByKeyAndSender'
            );
        }
        // verify the required parameter 'public_key' is set
        if ($public_key === null || (is_array($public_key) && count($public_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_key when calling getNamespaceMetadataByKeyAndSender'
            );
        }

        $resourcePath = '/metadata/namespace/{namespaceId}/key/{key}/sender/{publicKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($namespace_id !== null) {
            $resourcePath = str_replace(
                '{' . 'namespaceId' . '}',
                ObjectSerializer::toPathValue($namespace_id),
                $resourcePath
            );
        }
        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($public_key !== null) {
            $resourcePath = str_replace(
                '{' . 'publicKey' . '}',
                ObjectSerializer::toPathValue($public_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
