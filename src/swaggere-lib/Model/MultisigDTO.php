<?php
/**
 * MultisigDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catapult REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MultisigDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MultisigDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MultisigDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account' => 'string',
        'account_address' => 'string',
        'min_approval' => 'int',
        'min_removal' => 'int',
        'cosignatories' => 'string[]',
        'multisig_accounts' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account' => null,
        'account_address' => null,
        'min_approval' => null,
        'min_removal' => null,
        'cosignatories' => null,
        'multisig_accounts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        'account_address' => 'accountAddress',
        'min_approval' => 'minApproval',
        'min_removal' => 'minRemoval',
        'cosignatories' => 'cosignatories',
        'multisig_accounts' => 'multisigAccounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'account_address' => 'setAccountAddress',
        'min_approval' => 'setMinApproval',
        'min_removal' => 'setMinRemoval',
        'cosignatories' => 'setCosignatories',
        'multisig_accounts' => 'setMultisigAccounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'account_address' => 'getAccountAddress',
        'min_approval' => 'getMinApproval',
        'min_removal' => 'getMinRemoval',
        'cosignatories' => 'getCosignatories',
        'multisig_accounts' => 'getMultisigAccounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['account_address'] = isset($data['account_address']) ? $data['account_address'] : null;
        $this->container['min_approval'] = isset($data['min_approval']) ? $data['min_approval'] : null;
        $this->container['min_removal'] = isset($data['min_removal']) ? $data['min_removal'] : null;
        $this->container['cosignatories'] = isset($data['cosignatories']) ? $data['cosignatories'] : null;
        $this->container['multisig_accounts'] = isset($data['multisig_accounts']) ? $data['multisig_accounts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ($this->container['min_approval'] === null) {
            $invalidProperties[] = "'min_approval' can't be null";
        }
        if ($this->container['min_removal'] === null) {
            $invalidProperties[] = "'min_removal' can't be null";
        }
        if ($this->container['cosignatories'] === null) {
            $invalidProperties[] = "'cosignatories' can't be null";
        }
        if ($this->container['multisig_accounts'] === null) {
            $invalidProperties[] = "'multisig_accounts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets account_address
     *
     * @return string
     */
    public function getAccountAddress()
    {
        return $this->container['account_address'];
    }

    /**
     * Sets account_address
     *
     * @param string $account_address account_address
     *
     * @return $this
     */
    public function setAccountAddress($account_address)
    {
        $this->container['account_address'] = $account_address;

        return $this;
    }

    /**
     * Gets min_approval
     *
     * @return int
     */
    public function getMinApproval()
    {
        return $this->container['min_approval'];
    }

    /**
     * Sets min_approval
     *
     * @param int $min_approval min_approval
     *
     * @return $this
     */
    public function setMinApproval($min_approval)
    {
        $this->container['min_approval'] = $min_approval;

        return $this;
    }

    /**
     * Gets min_removal
     *
     * @return int
     */
    public function getMinRemoval()
    {
        return $this->container['min_removal'];
    }

    /**
     * Sets min_removal
     *
     * @param int $min_removal min_removal
     *
     * @return $this
     */
    public function setMinRemoval($min_removal)
    {
        $this->container['min_removal'] = $min_removal;

        return $this;
    }

    /**
     * Gets cosignatories
     *
     * @return string[]
     */
    public function getCosignatories()
    {
        return $this->container['cosignatories'];
    }

    /**
     * Sets cosignatories
     *
     * @param string[] $cosignatories cosignatories
     *
     * @return $this
     */
    public function setCosignatories($cosignatories)
    {
        $this->container['cosignatories'] = $cosignatories;

        return $this;
    }

    /**
     * Gets multisig_accounts
     *
     * @return string[]
     */
    public function getMultisigAccounts()
    {
        return $this->container['multisig_accounts'];
    }

    /**
     * Sets multisig_accounts
     *
     * @param string[] $multisig_accounts multisig_accounts
     *
     * @return $this
     */
    public function setMultisigAccounts($multisig_accounts)
    {
        $this->container['multisig_accounts'] = $multisig_accounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


